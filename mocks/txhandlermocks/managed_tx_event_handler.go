// Code generated by mockery v2.53.5. DO NOT EDIT.

package txhandlermocks

import (
	context "context"

	apitypes "github.com/hyperledger/firefly-transaction-manager/pkg/apitypes"

	mock "github.com/stretchr/testify/mock"
)

// ManagedTxEventHandler is an autogenerated mock type for the ManagedTxEventHandler type
type ManagedTxEventHandler struct {
	mock.Mock
}

// HandleEvent provides a mock function with given fields: ctx, e
func (_m *ManagedTxEventHandler) HandleEvent(ctx context.Context, e apitypes.ManagedTransactionEvent) error {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for HandleEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, apitypes.ManagedTransactionEvent) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManagedTxEventHandler creates a new instance of ManagedTxEventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagedTxEventHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagedTxEventHandler {
	mock := &ManagedTxEventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
