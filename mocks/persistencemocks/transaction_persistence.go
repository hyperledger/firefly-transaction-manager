// Code generated by mockery v2.53.4. DO NOT EDIT.

package persistencemocks

import (
	context "context"

	apitypes "github.com/hyperledger/firefly-transaction-manager/pkg/apitypes"

	ffcapi "github.com/hyperledger/firefly-transaction-manager/pkg/ffcapi"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"

	txhandler "github.com/hyperledger/firefly-transaction-manager/pkg/txhandler"
)

// TransactionPersistence is an autogenerated mock type for the TransactionPersistence type
type TransactionPersistence struct {
	mock.Mock
}

// AddTransactionConfirmations provides a mock function with given fields: ctx, txID, clearExisting, confirmations
func (_m *TransactionPersistence) AddTransactionConfirmations(ctx context.Context, txID string, clearExisting bool, confirmations ...*ffcapi.Confirmation) error {
	_va := make([]interface{}, len(confirmations))
	for _i := range confirmations {
		_va[_i] = confirmations[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, txID, clearExisting)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTransactionConfirmations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, ...*ffcapi.Confirmation) error); ok {
		r0 = rf(ctx, txID, clearExisting, confirmations...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransaction provides a mock function with given fields: ctx, txID
func (_m *TransactionPersistence) DeleteTransaction(ctx context.Context, txID string) error {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, txID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactionByID provides a mock function with given fields: ctx, txID
func (_m *TransactionPersistence) GetTransactionByID(ctx context.Context, txID string) (*apitypes.ManagedTX, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *apitypes.ManagedTX
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apitypes.ManagedTX, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apitypes.ManagedTX); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apitypes.ManagedTX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByIDWithStatus provides a mock function with given fields: ctx, txID, history
func (_m *TransactionPersistence) GetTransactionByIDWithStatus(ctx context.Context, txID string, history bool) (*apitypes.TXWithStatus, error) {
	ret := _m.Called(ctx, txID, history)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByIDWithStatus")
	}

	var r0 *apitypes.TXWithStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*apitypes.TXWithStatus, error)); ok {
		return rf(ctx, txID, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *apitypes.TXWithStatus); ok {
		r0 = rf(ctx, txID, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apitypes.TXWithStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, txID, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByNonce provides a mock function with given fields: ctx, signer, nonce
func (_m *TransactionPersistence) GetTransactionByNonce(ctx context.Context, signer string, nonce *fftypes.FFBigInt) (*apitypes.ManagedTX, error) {
	ret := _m.Called(ctx, signer, nonce)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByNonce")
	}

	var r0 *apitypes.ManagedTX
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.FFBigInt) (*apitypes.ManagedTX, error)); ok {
		return rf(ctx, signer, nonce)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.FFBigInt) *apitypes.ManagedTX); ok {
		r0 = rf(ctx, signer, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apitypes.ManagedTX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *fftypes.FFBigInt) error); ok {
		r1 = rf(ctx, signer, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionConfirmations provides a mock function with given fields: ctx, txID
func (_m *TransactionPersistence) GetTransactionConfirmations(ctx context.Context, txID string) ([]*ffcapi.Confirmation, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionConfirmations")
	}

	var r0 []*ffcapi.Confirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ffcapi.Confirmation, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ffcapi.Confirmation); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ffcapi.Confirmation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionReceipt provides a mock function with given fields: ctx, txID
func (_m *TransactionPersistence) GetTransactionReceipt(ctx context.Context, txID string) (*ffcapi.TransactionReceiptResponse, error) {
	ret := _m.Called(ctx, txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionReceipt")
	}

	var r0 *ffcapi.TransactionReceiptResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ffcapi.TransactionReceiptResponse, error)); ok {
		return rf(ctx, txID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ffcapi.TransactionReceiptResponse); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ffcapi.TransactionReceiptResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTransactionPreAssignedNonce provides a mock function with given fields: ctx, tx
func (_m *TransactionPersistence) InsertTransactionPreAssignedNonce(ctx context.Context, tx *apitypes.ManagedTX) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransactionPreAssignedNonce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *apitypes.ManagedTX) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTransactionWithNextNonce provides a mock function with given fields: ctx, tx, lookupNextNonce
func (_m *TransactionPersistence) InsertTransactionWithNextNonce(ctx context.Context, tx *apitypes.ManagedTX, lookupNextNonce txhandler.NextNonceCallback) error {
	ret := _m.Called(ctx, tx, lookupNextNonce)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransactionWithNextNonce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *apitypes.ManagedTX, txhandler.NextNonceCallback) error); ok {
		r0 = rf(ctx, tx, lookupNextNonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTransactionsByCreateTime provides a mock function with given fields: ctx, after, limit, dir
func (_m *TransactionPersistence) ListTransactionsByCreateTime(ctx context.Context, after *apitypes.ManagedTX, limit int, dir txhandler.SortDirection) ([]*apitypes.ManagedTX, error) {
	ret := _m.Called(ctx, after, limit, dir)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactionsByCreateTime")
	}

	var r0 []*apitypes.ManagedTX
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apitypes.ManagedTX, int, txhandler.SortDirection) ([]*apitypes.ManagedTX, error)); ok {
		return rf(ctx, after, limit, dir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apitypes.ManagedTX, int, txhandler.SortDirection) []*apitypes.ManagedTX); ok {
		r0 = rf(ctx, after, limit, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apitypes.ManagedTX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apitypes.ManagedTX, int, txhandler.SortDirection) error); ok {
		r1 = rf(ctx, after, limit, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransactionsByNonce provides a mock function with given fields: ctx, signer, after, limit, dir
func (_m *TransactionPersistence) ListTransactionsByNonce(ctx context.Context, signer string, after *fftypes.FFBigInt, limit int, dir txhandler.SortDirection) ([]*apitypes.ManagedTX, error) {
	ret := _m.Called(ctx, signer, after, limit, dir)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactionsByNonce")
	}

	var r0 []*apitypes.ManagedTX
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.FFBigInt, int, txhandler.SortDirection) ([]*apitypes.ManagedTX, error)); ok {
		return rf(ctx, signer, after, limit, dir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.FFBigInt, int, txhandler.SortDirection) []*apitypes.ManagedTX); ok {
		r0 = rf(ctx, signer, after, limit, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apitypes.ManagedTX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *fftypes.FFBigInt, int, txhandler.SortDirection) error); ok {
		r1 = rf(ctx, signer, after, limit, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransactionsPending provides a mock function with given fields: ctx, afterSequenceID, limit, dir
func (_m *TransactionPersistence) ListTransactionsPending(ctx context.Context, afterSequenceID string, limit int, dir txhandler.SortDirection) ([]*apitypes.ManagedTX, error) {
	ret := _m.Called(ctx, afterSequenceID, limit, dir)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactionsPending")
	}

	var r0 []*apitypes.ManagedTX
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, txhandler.SortDirection) ([]*apitypes.ManagedTX, error)); ok {
		return rf(ctx, afterSequenceID, limit, dir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, txhandler.SortDirection) []*apitypes.ManagedTX); ok {
		r0 = rf(ctx, afterSequenceID, limit, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apitypes.ManagedTX)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, txhandler.SortDirection) error); ok {
		r1 = rf(ctx, afterSequenceID, limit, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransactionReceipt provides a mock function with given fields: ctx, txID, receipt
func (_m *TransactionPersistence) SetTransactionReceipt(ctx context.Context, txID string, receipt *ffcapi.TransactionReceiptResponse) error {
	ret := _m.Called(ctx, txID, receipt)

	if len(ret) == 0 {
		panic("no return value specified for SetTransactionReceipt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *ffcapi.TransactionReceiptResponse) error); ok {
		r0 = rf(ctx, txID, receipt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, txID, updates
func (_m *TransactionPersistence) UpdateTransaction(ctx context.Context, txID string, updates *apitypes.TXUpdates) error {
	ret := _m.Called(ctx, txID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *apitypes.TXUpdates) error); ok {
		r0 = rf(ctx, txID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionPersistence creates a new instance of TransactionPersistence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionPersistence(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionPersistence {
	mock := &TransactionPersistence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
