// Code generated by mockery v2.53.5. DO NOT EDIT.

package wsmocks

import (
	ws "github.com/hyperledger/firefly-transaction-manager/internal/ws"
	mock "github.com/stretchr/testify/mock"
)

// WebSocketChannels is an autogenerated mock type for the WebSocketChannels type
type WebSocketChannels struct {
	mock.Mock
}

// GetChannels provides a mock function with given fields: topic
func (_m *WebSocketChannels) GetChannels(topic string) (chan<- interface{}, chan<- interface{}, <-chan *ws.WebSocketCommandMessageOrError) {
	ret := _m.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for GetChannels")
	}

	var r0 chan<- interface{}
	var r1 chan<- interface{}
	var r2 <-chan *ws.WebSocketCommandMessageOrError
	if rf, ok := ret.Get(0).(func(string) (chan<- interface{}, chan<- interface{}, <-chan *ws.WebSocketCommandMessageOrError)); ok {
		return rf(topic)
	}
	if rf, ok := ret.Get(0).(func(string) chan<- interface{}); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) chan<- interface{}); ok {
		r1 = rf(topic)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan<- interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string) <-chan *ws.WebSocketCommandMessageOrError); ok {
		r2 = rf(topic)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(<-chan *ws.WebSocketCommandMessageOrError)
		}
	}

	return r0, r1, r2
}

// SendReply provides a mock function with given fields: message
func (_m *WebSocketChannels) SendReply(message interface{}) {
	_m.Called(message)
}

// NewWebSocketChannels creates a new instance of WebSocketChannels. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebSocketChannels(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebSocketChannels {
	mock := &WebSocketChannels{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
