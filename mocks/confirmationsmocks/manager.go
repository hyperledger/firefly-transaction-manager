// Code generated by mockery v2.53.4. DO NOT EDIT.

package confirmationsmocks

import (
	confirmations "github.com/hyperledger/firefly-transaction-manager/internal/confirmations"
	apitypes "github.com/hyperledger/firefly-transaction-manager/pkg/apitypes"

	context "context"

	ffcapi "github.com/hyperledger/firefly-transaction-manager/pkg/ffcapi"

	fftypes "github.com/hyperledger/firefly-common/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CheckInFlight provides a mock function with given fields: listenerID
func (_m *Manager) CheckInFlight(listenerID *fftypes.UUID) bool {
	ret := _m.Called(listenerID)

	if len(ret) == 0 {
		panic("no return value specified for CheckInFlight")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*fftypes.UUID) bool); ok {
		r0 = rf(listenerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewBlockHashes provides a mock function with no fields
func (_m *Manager) NewBlockHashes() chan<- *ffcapi.BlockHashEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewBlockHashes")
	}

	var r0 chan<- *ffcapi.BlockHashEvent
	if rf, ok := ret.Get(0).(func() chan<- *ffcapi.BlockHashEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- *ffcapi.BlockHashEvent)
		}
	}

	return r0
}

// Notify provides a mock function with given fields: n
func (_m *Manager) Notify(n *confirmations.Notification) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*confirmations.Notification) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with no fields
func (_m *Manager) Start() {
	_m.Called()
}

// StartBlockConfirmationsListener provides a mock function with given fields: ctx, id, fromBlock, checkpoint, eventStream
func (_m *Manager) StartBlockConfirmationsListener(ctx context.Context, id *fftypes.UUID, fromBlock string, checkpoint *ffcapi.BlockListenerCheckpoint, eventStream chan<- *apitypes.ConfirmationsForListenerEvent) error {
	ret := _m.Called(ctx, id, fromBlock, checkpoint, eventStream)

	if len(ret) == 0 {
		panic("no return value specified for StartBlockConfirmationsListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, string, *ffcapi.BlockListenerCheckpoint, chan<- *apitypes.ConfirmationsForListenerEvent) error); ok {
		r0 = rf(ctx, id, fromBlock, checkpoint, eventStream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartConfirmedBlockListener provides a mock function with given fields: ctx, id, fromBlock, checkpoint, eventStream
func (_m *Manager) StartConfirmedBlockListener(ctx context.Context, id *fftypes.UUID, fromBlock string, checkpoint *ffcapi.BlockListenerCheckpoint, eventStream chan<- *ffcapi.ListenerEvent) error {
	ret := _m.Called(ctx, id, fromBlock, checkpoint, eventStream)

	if len(ret) == 0 {
		panic("no return value specified for StartConfirmedBlockListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, string, *ffcapi.BlockListenerCheckpoint, chan<- *ffcapi.ListenerEvent) error); ok {
		r0 = rf(ctx, id, fromBlock, checkpoint, eventStream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with no fields
func (_m *Manager) Stop() {
	_m.Called()
}

// StopConfirmedBlockListener provides a mock function with given fields: ctx, id
func (_m *Manager) StopConfirmedBlockListener(ctx context.Context, id *fftypes.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for StopConfirmedBlockListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
